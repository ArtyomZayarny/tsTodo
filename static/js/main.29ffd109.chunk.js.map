{"version":3,"sources":["components/Navbar.tsx","components/TodoForm.tsx","components/TodoList.tsx","pages/TodosPage.tsx","pages/AboutPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","className","to","id","TodoForm","props","ref","useRef","useState","error","setError","autoComplete","type","placeholder","onKeyPress","event","key","current","value","onAdd","onBlur","htmlFor","TodoList","todos","onToggle","onRemove","length","map","todo","classes","completed","push","join","checked","onChange","title","onClick","preventDefault","removeHandler","TodoPage","setTodos","useEffect","savedTodo","JSON","parse","localStorage","getItem","setItem","stringify","newTodo","Date","now","updatedTodo","window","confirm","filter","AboutPage","history","useHistory","App","component","path","exact","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.29ffd109.chunk.js","sourcesContent":["import React from 'react'\nimport {NavLink} from 'react-router-dom'\n\nexport const Navbar:React.FC = () => {\n    return (\n        <nav>\n            <div className=\"nav-wrapper px2\">\n                <NavLink to=\"/\" className=\"brand-logo\">Todo-TS</NavLink>\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n                    <li><NavLink to=\"/\">Todos</NavLink></li>\n                    <li><NavLink to=\"/about\">About</NavLink></li>\n                </ul>\n            </div>\n        </nav>\n    )\n}","import React, {useState,useRef} from 'react'\n\ntype TodoFormProps = {\n  onAdd(title:string):void\n}\n\nexport const TodoForm:React.FC<TodoFormProps> = (props) => {\n  const ref = useRef<HTMLInputElement>(null);\n  const [error,setError] = useState('');\n  const addHandler = (event:React.KeyboardEvent) => {\n      if(event.key === 'Enter') {\n        if (ref.current!.value === '') {\n          setError('Please write the name of todo');\n        } else {\n          props.onAdd(ref.current!.value)\n          setError('');\n          ref.current!.value = '';\n        }\n      }\n  }\n  const handleBlur = () =>{\n    setError('')\n  }\n \n    return (\n          <div className=\"input-field\">\n            <input \n              autoComplete=\"off\"\n              ref={ref}\n              id=\"last_name\"\n              type=\"text\"\n              placeholder=\"What need to do ?\"\n              onKeyPress = {addHandler}\n              onBlur={ () => {handleBlur()}}\n              />\n            <label htmlFor=\"last_name\"></label>\n            {error && <p className=\"error\">{error}</p> }\n          </div>\n       \n    )\n}","import React from 'react'\nimport {ITodo} from './interfaces'\n\ntype TodoListProps = {\n    todos:ITodo[]\n    onToggle(id:number):void\n    onRemove(id:number):void\n}\n\nexport const TodoList:React.FC<TodoListProps> = ({todos,onToggle,onRemove}) => {\n\nconst removeHandler = (event:React.MouseEvent,id:number) => {\n        event.preventDefault()\n        onRemove(id)\n}\n\n    return (\n        <>\n        {todos.length === 0 ? <p>Todo list is empty</p> : ''}\n            <ul>\n                {todos.map( todo => {\n                        const classes = ['todo'];\n                        if(todo.completed) {\n                                classes.push('completed')\n                        }\n                    return (\n                        <li className={classes.join(' ')} key={todo.id}>\n                        <label >\n                            <input type=\"checkbox\"\n                            checked={todo.completed ? true : false}\n                                onChange={() => {onToggle(todo.id)}}\n                            />\n                            <span>{todo.title}</span>\n                            <i className=\"material-icons red-text\"\n                                onClick={ event => removeHandler(event,todo.id)}\n                            >delete</i>\n                        </label>\n                    </li>\n                    )\n                })}\n            </ul>\n        </>\n    )\n}","import React, {useState, useEffect} from  'react'\nimport { TodoForm } from '../components/TodoForm';\nimport {ITodo} from '../components/interfaces';\nimport { TodoList } from '../components/TodoList';\n\nexport const TodoPage:React.FC = () => {\n    const [todos,setTodos] = useState<ITodo[]>([]);\n\n    useEffect( () => {\n        const savedTodo = JSON.parse(localStorage.getItem('todos') || '[]');\n       setTodos(savedTodo) \n        \n    },[]);\n    useEffect( () => {\n        localStorage.setItem('todos', JSON.stringify(todos))   \n    },[todos]);\n\n    const addHandler = (title:string) => {\n      const newTodo:ITodo = {\n        id:Date.now(),\n        title:title,\n        completed:false\n      }\n      setTodos([newTodo,...todos])\n    }\n  \n    const toggleHandler = (id:number) => {\n  \n       const updatedTodo = todos.map( todo => {\n                if(todo.id === id){\n                    todo.completed = !todo.completed\n                }\n         return todo\n       });\n     setTodos(updatedTodo)\n    }\n  \n  const removeHandler = (id:number) => {\n      \n    if (window.confirm('Are you sure to delete this todo ?')) {\n      const updatedTodo = todos.filter( todo => todo.id !== id);\n      setTodos(updatedTodo)\n    } \n  }\n    return (\n        <>\n            <TodoForm onAdd={addHandler}/>\n            <TodoList todos={todos} onToggle={toggleHandler} onRemove={removeHandler}/>\n        </>\n    )\n}","import React from 'react'\nimport {useHistory} from 'react-router-dom'\n\n\nexport const AboutPage:React.FC = () => {\n    const history = useHistory();\n    return (\n        <>\n        <h2>About Page</h2>\n        <button className=\"btn\"\n        onClick = { () => {history.push('/')}}\n        >Return to todos</button>\n        </>\n        \n    )\n}","import React from 'react';\nimport { Navbar } from './components/Navbar';\nimport {BrowserRouter as Router,Switch,Route} from 'react-router-dom'\nimport { TodoPage } from './pages/TodosPage';\nimport { AboutPage } from './pages/AboutPage';\n\n\n\nconst App:React.FC = () => {\n\n  return (\n    <Router>\n        <div className=\"app\">\n            <Navbar />\n            <div className=\"container\">\n              <Switch>\n                <Route component={TodoPage} path='/' exact />\n                <Route component={AboutPage} path=\"/about\" />\n              </Switch>\n            </div>\n        </div>\n    </Router>\n    \n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}